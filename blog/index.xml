<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GO Feature Flag blog on GO Feature Flag</title><link>https://gofeatureflag.org/blog/</link><description>Recent content in GO Feature Flag blog on GO Feature Flag</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 31 Aug 2020 20:33:11 +0600</lastBuildDate><atom:link href="https://gofeatureflag.org/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>ðŸ”Š Feature Flags in Devâ€™Obs Podcast ðŸ‡«ðŸ‡·</title><link>https://gofeatureflag.org/blog/20220701-feature-flags-devobs-podcast/</link><pubDate>Thu, 07 Jul 2022 09:57:56 +0200</pubDate><guid>https://gofeatureflag.org/blog/20220701-feature-flags-devobs-podcast/</guid><description>ðŸ”Š Feature Flags in Devâ€™Obs Podcast ðŸ‡«ðŸ‡· Earlier this week the super cool podcast Devâ€™Obs asked me to talk about feature flags, go-feature-flag and also the super nice initiative Open-feature.
The podcast is in French ðŸ‡«ðŸ‡· (yes I know sorryâ€¦) but you can learn a lot of cool things, when to use them, what is Open-feature about and all the cool things that the feature flags can bring to your developer experience.</description></item><item><title>Automate Your Product Release Cycles Using Go-Feature-Flag</title><link>https://gofeatureflag.org/blog/20210111-automate-your-product-release-cycles-using-go-feature-flag/</link><pubDate>Mon, 11 Jan 2021 09:57:56 +0200</pubDate><guid>https://gofeatureflag.org/blog/20210111-automate-your-product-release-cycles-using-go-feature-flag/</guid><description>Automate Your Product Release Cycles Using Go-Feature-Flag When you build a new feature, orchestrating the actual launch schedule between the Product, Engineering, and Marketing teams can be challenging.
While it seems easy to launch something new, a poorly executed rollout can end up being your worst nightmare.
In this article, I will present to you how to use the Go module go-feature-flag to roll out your new features smoothly and help you be confident during the rollout phase.</description></item><item><title>Introduction blog post</title><link>https://gofeatureflag.org/blog/20210111-introduction-blog-post/</link><pubDate>Mon, 11 Jan 2021 09:57:56 +0200</pubDate><guid>https://gofeatureflag.org/blog/20210111-introduction-blog-post/</guid><description>Introduction blog post I absolutely donâ€™t think human/manual QA gates should be involved in between the writing of code and its being live. To avoid breaking things every time and to have an early cutoff system, you should use feature flags.
There are a lot of systems available on the market to manage your flags, like LaunchDarkly or UNLEASH, that have Golang support â€” but this option is expensive, and you have to host a server somewhere to manage your flags.</description></item></channel></rss>